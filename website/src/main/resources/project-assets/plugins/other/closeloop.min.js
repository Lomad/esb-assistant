(function ($, window) {
    var settings = "";
    var methods = {
        /**
         * Initialize circle
         * @auto:shensheng
         * Date:20170518
         * @param {Object} options
         * @returns {Object[]}
         * @version:2.0
         */
        initLoop: function (options) {
            var $this = $(this);
            $this.html("");
            settings = $.extend({}, this.closeLoop.defaults, options);
            $(this).closeLoop('initNode').closeLoop('initCircles').closeLoop('initBorderBgColor').closeLoop('initCenterContent').closeLoop('initNodeName')
                .closeLoop('initTooltipEvents').closeLoop('initEvents').closeLoop('timerInterval'); //initEvents

            //环形控件加载成功以后执行的回调函数
            if (settings.loadSuccess) {
                settings.loadSuccess();
            }

            return $this;
        },
        //先初始化节点
        initNode: function () {
            var $this = $(this);
            var data = "";
            var closeLoopTemplate = "<div class='closeLoop' style=' width:100%;height:100%;margin:0 auto; background:#E6E6E6;padding:" + settings.outsidePadding + "px;border-radius: 20px  !important; '></div>";
            var closeLoopBoxTemplate = "<div class='closeLoop-box' style='width:100%;height:100%;background:#fff; border-radius:15px  !important;position:relative;'></div>";


            var imgborder = '<div id="imgborderletTop" class="imgborder" style=" display:none; position:absolute;  left:-6px; top:-6px;"><div class="imgborderBg" style="width:30px; height:30px; overflow:hidden;position:relative;"><div class="letTop" style="height:100px;width:100px;border:' + settings.outsidePadding + 'px solid #14AF8D;border-radius:20px !important;"></div></div></div>';
            imgborder += '<div id="imgborderrightTop" class="imgborder" style="  display:none;position:absolute;  right:-6px; top:-6px;"><div class="imgborderBg"  style="width:30px; height:30px; overflow:hidden;position:relative;"><div class="rightTop" style="height:100px;width:100px;border:' + settings.outsidePadding + 'px solid #14AF8D;border-radius:20px !important; position:absolute; left:-82px;top:0;"></div></div></div>';
            imgborder += '<div id="imgborderbottomLeft" class="imgborder" style="  display:none;position:absolute;  bottom:-6px; left:-6px;"><div  class="imgborderBg" style="width:30px; height:30px; overflow:hidden;position:relative;"><div class="bottomLeft" style="height:100px;width:100px; border:' + settings.outsidePadding + 'px solid #14AF8D;border-radius:20px !important;position:absolute; left:0;top:-82px;"></div></div></div>';
            imgborder += '<div id="imgborderbottomRight" class="imgborder" style="  display:none;position:absolute;  bottom:-6px; right:-6px;"><div class="imgborderBg"  style="width:30px; height:30px; overflow:hidden;position:relative;"><div class="bottomRight" style="height:100px;width:100px;border:' + settings.outsidePadding + 'px solid #14AF8D;border-radius:20px !important;position:absolute; left:-82px;top:-82px;"></div></div></div>';


            var bordertip = '<div id="borderTipTop" class="bordertip" style="width:0; height:6px; background-color:#14AF8D; position:absolute; left:10px; top:-6px;"></div>';
            bordertip += '<div id="borderTipRight" class="bordertip" style="width:6px; height:0; background-color:#14AF8D;position:absolute; top:10px;right:-6px; "></div>';
            bordertip += '<div id="borderTipBottom" class="bordertip" style="width:0; height:6px; background-color:#14AF8D;position:absolute; right:10px;bottom:-6px; "></div>';
            bordertip += '<div id="borderTipLeft" class="bordertip" style="width:6px; height:0; background-color:#14AF8D;position:absolute; bottom:10px;left:-6px; "></div>';


            $this.html(closeLoopTemplate).children().html(closeLoopBoxTemplate).children().append(imgborder).append(bordertip);
            if (settings.url) {
                $.ajax({
                    type: "POST",
                    url: settings.url,
                    async: false,
                    data: settings.paramValue,
                    success: function (result) {
                        if ($.isArray(result)) {
                            data = result;
                        } else {
                            try {
                                data = $.parseJSON(result);
                            } catch (e) {
                                throw "加载数据失败";
                            }
                        }
                    }
                });
            } else if (settings.data && $.isArray(settings.data)) {
                data = settings.data;
            } else {
                data = "";
            }

            //state(0:表示未执行节点，1:表示已执行节点，2：当前正在执行节点，3：应已执行,但未执行节点)

            if (settings.getIEVersion() < 9) {
                if (data && $.isArray(data)) {
                    for (var i = 0; i < data.length; i++) {
                        $this.children().children().append("<span class='clircle' id='id:" + data[i].id + ",islastcurrent:" + data[i].isLastCurrent + "' name=" + data[i].name + " data-serverTotalCount=" + data[i].serverTotalCount + " data-serverFailCount=" + data[i].serverFailCount + " data-consumerTotalCount=" + data[i].consumerTotalCount + " data-consumerFailCount=" + data[i].consumerFailCount + "    style='position:absolute;width:34px;height:34px;line-height:30px;text-align:center;color:#36BC9F;font-size:16px;display:none;cursor:pointer;'  currentdis='0' quadrantNumber=0 titleName=" + data[i].name + " nodestate=" + data[i].nodeState + "><img src='/project-assets/images/PIE/circleState0.png' style='width:100%; vertical-align: top;' ><span style='position: absolute; left:0; top:0;width:100%; height: 100%; text-align: center;line-height: 30px;' >" + (i+1) + "</span></span>");

                        //if (data[i].nodeState == 0) {
                        //    $this.children().children().append("<span class='clircle' id='id:" + data[i].id + ",islastcurrent:" + data[i].isLastCurrent + "' name=" + data[i].name + " data-jr=" + data[i].jr + " data-zr=" + data[i].zr + " data-sum=" + data[i].sum + " data-yc=" + data[i].yc + "  style='position:absolute;width:34px;height:34px;line-height:30px;text-align:center;color:#C1C1C1;font-size:16px;display:none;cursor:pointer;'  currentdis='0' quadrantNumber=0 titleName=" + data[i].name + " nodestate=" + data[i].nodeState + "><img src='/CDR_Web/assetsportal/PIE/circleState0.png' style='width:100%; vertical-align: top; ' ><span style='position: absolute; left:0; top:0;width:100%; height: 100%; text-align: center;line-height: 30px;' >" + (i+1) + "</span></span>");
                        //} else if (data[i].nodeState == 1) {
                        //    $this.children().children().append("<span class='clircle' id='id:" + data[i].id + ",islastcurrent:" + data[i].isLastCurrent + "' name=" + data[i].name + " data-jr=" + data[i].jr + " data-zr=" + data[i].zr + " data-sum=" + data[i].sum + " data-yc=" + data[i].yc + "    style='position:absolute;width:34px;height:34px;line-height:30px;text-align:center;color:#36BC9F;font-size:16px;display:none;cursor:pointer;'  currentdis='0' quadrantNumber=0 titleName=" + data[i].name + " nodestate=" + data[i].nodeState + "><img src='/CDR_Web/assetsportal/PIE/circleState1.png' style='width:100%; vertical-align: top;' ><span style='position: absolute; left:0; top:0;width:100%; height: 100%; text-align: center;line-height: 30px;' >" + (i+1) + "</span></span>");
                        //} else if (data[i].nodeState == 2) {
                        //    $this.children().children().append("<span class='clircle' id='id:" + data[i].id + ",islastcurrent:" + data[i].isLastCurrent + "' name=" + data[i].name + " data-jr=" + data[i].jr + " data-zr=" + data[i].zr + " data-sum=" + data[i].sum + " data-yc=" + data[i].yc + "     style='position:absolute;width:34px;height:34px;line-height:30px;text-align:center;color:#FFFFFF;font-size:16px;display:none;cursor:pointer;'  currentdis='0' quadrantNumber=0 titleName=" + data[i].name + " nodestate=" + data[i].nodeState + "><img src='/CDR_Web/assetsportal/PIE/circleState2.png' style='width:100%; vertical-align: top;' ><span style='position: absolute; left:0; top:0;width:100%; height: 100%; text-align: center;line-height: 30px;' >" + (i+1) + "</span></span>");
                        //} else {
                        //    $this.children().children().append("<span class='clircle' id='id:" + data[i].id + ",islastcurrent:" + data[i].isLastCurrent + "' name=" + data[i].name + " data-jr=" + data[i].jr + " data-zr=" + data[i].zr + " data-sum=" + data[i].sum + " data-yc=" + data[i].yc + "     style='position:absolute;width:34px;height:34px;line-height:30px;text-align:center;color:#FFFFFF;font-size:16px;display:none;cursor:pointer;'  currentdis='0' quadrantNumber=0 titleName=" + data[i].name + " nodestate=" + data[i].nodeState + "><img src='/CDR_Web/assetsportal/PIE/circleState3.png' style='width:100%; vertical-align: top;' ><span style='position: absolute; left:0; top:0;width:100%; height: 100%; text-align: center;line-height: 30px;' >" + (i+1) + "</span></span>");
                        //}
                    }
                }
            } else {
                if (data && $.isArray(data)) {
                    for (var i = 0; i < data.length; i++) {
                        $this.children().children().append("<span class='clircle' id='id:" + data[i].id + ",islastcurrent:" + data[i].isLastCurrent + "' name=" + data[i].name + " data-serverTotalCount=" + data[i].serverTotalCount + " data-serverFailCount=" + data[i].serverFailCount + " data-consumerTotalCount=" + data[i].consumerTotalCount + " data-consumerFailCount=" + data[i].consumerFailCount + "  style='position:absolute;width:34px;height:34px;line-height:30px;text-align:center;border:2px solid #36BC9F;color:#36BC9F;font-size:16px;background-color:#F7F7F7; border-radius: 50%  !important; display:none;cursor:pointer;'  currentdis='0' quadrantNumber=0 titleName=" + data[i].name + " nodestate=" + data[i].nodeState + ">" + (i+1) + "</span>");

                        //if (data[i].nodeState == 0) {
                        //    $this.children().children().append("<span class='clircle' id='id:" + data[i].id + ",islastcurrent:" + data[i].isLastCurrent + "' name='" + data[i].name + "' data-jr=" + data[i].jr + " data-zr=" + data[i].zr + " data-sum=" + data[i].sum + " data-yc=" + data[i].yc + "  style='position:absolute;width:34px;height:34px;line-height:30px;text-align:center;border:2px solid #E6E6E6;color:#C1C1C1;font-size:16px;background-color:#F7F7F7; border-radius: 50% !important;display:none;cursor:pointer;'  currentdis='0' quadrantNumber=0 titleName=" + data[i].name + " nodestate=" + data[i].nodeState + ">" + (i+1) + "</spana>");
                        //} else if (data[i].nodeState == 1) {
                        //    $this.children().children().append("<span class='clircle' id='id:" + data[i].id + ",islastcurrent:" + data[i].isLastCurrent + "' name=" + data[i].name + " data-jr=" + data[i].jr + " data-zr=" + data[i].zr + " data-sum=" + data[i].sum + " data-yc=" + data[i].yc + "  style='position:absolute;width:34px;height:34px;line-height:30px;text-align:center;border:2px solid #36BC9F;color:#36BC9F;font-size:16px;background-color:#C2ECE4; border-radius: 50%  !important; display:none;cursor:pointer;'  currentdis='0' quadrantNumber=0 titleName=" + data[i].name + " nodestate=" + data[i].nodeState + ">" + (i+1) + "</span>");
                        //} else if (data[i].nodeState == 2) {
                        //    $this.children().children().append("<span class='clircle' id='id:" + data[i].id + ",islastcurrent:" + data[i].isLastCurrent + "' name=" + data[i].name + " data-jr=" + data[i].jr + " data-zr=" + data[i].zr + " data-sum=" + data[i].sum + " data-yc=" + data[i].yc + "  style='position:absolute;width:34px;height:34px;line-height:30px;text-align:center;border:2px solid #16B08E;color:#FFFFFF;font-size:16px;background-color:#16B08E; border-radius: 50%  !important; display:none;cursor:pointer;'  currentdis='0' quadrantNumber=0 titleName=" + data[i].name + " nodestate=" + data[i].nodeState + ">" + (i+1) + "</span>");
                        //} else {
                        //    $this.children().children().append("<span class='clircle' id='id:" + data[i].id + ",islastcurrent:" + data[i].isLastCurrent + "' name=" + data[i].name + " data-jr=" + data[i].jr + " data-zr=" + data[i].zr + " data-sum=" + data[i].sum + " data-yc=" + data[i].yc + "  style='position:absolute;width:34px;height:34px;line-height:30px;text-align:center;border:2px solid #ACACAC;color:#FFFFFF;font-size:16px;background-color:#ACACAC; border-radius: 50%  !important; display:none;cursor:pointer;'  currentdis='0' quadrantNumber=0 titleName=" + data[i].name + " nodestate=" + data[i].nodeState + ">" + (i+1) + "</span>");
                        //}
                    }
                }
            }



            return $this;
        },
        //重新布局节点
        initCircles: function () {
            var $this = $(this);
            var circles = $this.children().children().children(".clircle"); //圆的个数
            if (circles.length == 0 || circles == "") {
                return $this;
            }
            var arcH = $this.children().children(".closeLoop-box").height(); //以内层矩形的高（不包括边框）
            var arcW = $this.children().children(".closeLoop-box").width(); //以内层矩形的宽（不包括边框）
            var arcL = (arcH + arcW) * 2; //内层矩形的周长

            settings.arcW = arcW;
            settings.arcH = arcH;


            //外层盒子的padding值，等于内层与外层盒子中间的宽度
            var outsideLeftPadding = parseInt($this.children().css('padding-left')) || 0;
            var outsideTopPadding = parseInt($this.children().css('padding-top')) || 0;
            var outsideRigthPadding = parseInt($this.children().css('padding-right')) || 0;
            var outsideBottomPadding = parseInt($this.children().css('padding-bottom')) || 0;

            settings.outsideLeftPadding = outsideLeftPadding;
            settings.outsideTopPadding = outsideTopPadding;
            settings.outsideRigthPadding = outsideRigthPadding;
            settings.outsideBottomPadding = outsideBottomPadding;


            //外层盒子的border宽度
            var outsideLeftBorder = parseInt($this.children().css('border-left-width')) || 0;
            var outsideToptBorder = parseInt($this.children().css('border-top-width')) || 0;
            var outsiderightBorder = parseInt($this.children().css('border-right-width')) || 0;
            var outsidebottomBorder = parseInt($this.children().css('border-bottom-width')) || 0;

            settings.outsideLeftBorder = outsideLeftBorder;
            settings.outsideToptBorder = outsideToptBorder;
            settings.outsiderightBorder = outsiderightBorder;
            settings.outsidebottomBorder = outsidebottomBorder;

            //内层盒子的border宽度
            var insideLeftBorder = parseInt($this.children().children().css('border-left-width')) || 0;
            var insideToptBorder = parseInt($this.children().children().css('border-top-width')) || 0;
            var insiderightBorder = parseInt($this.children().children().css('border-right-width')) || 0;
            var insidebottomBorder = parseInt($this.children().children().css('border-bottom-width')) || 0;

            settings.insideLeftBorder = insideLeftBorder;
            settings.insideToptBorder = insideToptBorder;
            settings.insiderightBorder = insiderightBorder;
            settings.insidebottomBorder = insidebottomBorder;



            //圆的border
            var circleLeftBorder = parseInt($this.children().children().children(".clircle").css('border-left-width')) || 0;
            var circleToptBorder = parseInt($this.children().children().children(".clircle").css('border-top-width')) || 0;
            var circlerightBorder = parseInt($this.children().children().children(".clircle").css('border-right-width')) || 0;
            var circlebottomBorder = parseInt($this.children().children().children(".clircle").css('border-bottom-width')) || 0;

            settings.circleLeftBorder = circleLeftBorder;
            settings.circleToptBorder = circleToptBorder;
            settings.circlerightBorder = circlerightBorder;
            settings.circlebottomBorder = circlebottomBorder;

            //这是轨道的四个角的imgbg的border
            $(".imgborderBg").css({
                "width": (settings.outsidePadding + 30) + "px",
                "height": (settings.outsidePadding + 30) + "px"
            });
            $rightTop = $this.find(".rightTop");
            var rightTopH = $rightTop.outerHeight();
            var rightTopW = $rightTop.outerWidth();
            var pRightTopH = $rightTop.parent().outerHeight();
            var pRightTopW = $rightTop.parent().outerWidth();
            $rightTop.css({
                "top": "0",
                "left": -(rightTopW - pRightTopW) + "px"
            })
            $this.find(".bottomLeft").css({
                "left": "0",
                "top": -(rightTopW - pRightTopW) + "px"
            })
            $this.find(".bottomRight").css({
                "left": -(rightTopW - pRightTopW) + "px",
                "top": -(rightTopW - pRightTopW) + "px"
            })




            var startDis = 0;
            if (settings.currentDis < 0) {
                startDis = 0;
            } else if (settings.currentDis > arcW) {
                startDis = arcW;
            } else {
                startDis = settings.currentDis;
            }
            //均等分的步长
            var avrageDis = arcL / circles.length;
            settings.avrageDis = avrageDis;



            if ($this.children().children().children(".clircle").length > 25) {
                var circleWH = avrageDis / 3;
                $this.children().children().children(".clircle").height(circleWH).width(circleWH).css({
                    "line-height": circleWH + "px"
                });
            }

            var circleR = $this.children().children().children(".clircle").height() / 2;
            settings.circleR = circleR;
            //设置容器内边距，让圆在之内
            //$this.css("padding", circleR + "px");


            var leftX = 0;
            var topY = 0;
            for (var i = 0; i < circles.length; i++) {
                var circle = circles[i];
                currentDis = startDis + i * avrageDis;

                //判断当前圆，在哪个一个象限
                var quadrantNumber = "";


                if (currentDis < arcW) {
                    leftX = currentDis - circleR - insideLeftBorder - outsideLeftPadding / 2 - circleLeftBorder;
                    topY = 0 - circleR - insideLeftBorder - outsideTopPadding / 2 - circleLeftBorder;

                    quadrantNumber = 1;
                } else if (currentDis >= arcW && currentDis < (arcH + arcW)) {
                    leftX = arcW - (circleR - outsideRigthPadding / 2) - circleLeftBorder;
                    topY = (currentDis - arcW) - (circleR + insideToptBorder + outsideTopPadding / 2) - circleLeftBorder;

                    quadrantNumber = 2;
                } else if (currentDis >= (arcH + arcW) && currentDis < (arcW * 2 + arcH)) {
                    leftX = arcW - (currentDis - (arcH + arcW)) - outsideLeftPadding / 2 - circleR - circleLeftBorder;
                    topY = arcH - (circleR - outsideBottomPadding / 2) - circleLeftBorder;

                    quadrantNumber = 3;
                } else if (currentDis >= (arcW * 2 + arcH) && currentDis < (arcW * 2 + arcH * 2)) {
                    leftX = 0 - outsideLeftPadding / 2 - circleR - insideLeftBorder - circleLeftBorder;
                    topY = arcH - (currentDis - (arcW * 2 + arcH)) - circleR - insideToptBorder - outsideTopPadding / 2 - circleLeftBorder;

                    quadrantNumber = 4;
                } else if (currentDis >= (arcW * 2 + arcH * 2) && currentDis < (arcW * 2 + arcH * 2 + startDis)) {
                    leftX = (currentDis - (arcW * 2 + arcH * 2)) - circleR - insideToptBorder - outsideTopPadding / 2 - circleLeftBorder;
                    topY = 0 - circleR - insideLeftBorder - outsideTopPadding / 2 - circleLeftBorder;

                    quadrantNumber = 5;
                }

                $(circle).attr("quadrantNumber", quadrantNumber) //设置当前节点属于哪一个象限

                $(circle).css({
                    "left": leftX + "px",
                    "top": topY + "px",
                    "display": "block"
                });

                //判断是否是最后一个执行节点，如果是，保存到最后一个节点(象限，left,top保存到)到setting的lastCurrent节点中
                if (parseInt($(circle).attr("nodestate")) == 2) {
                    settings.lastCurrentNode = {
                        "quadrantNumber": quadrantNumber,
                        "nodeAllDis": currentDis,
                        "leftX": leftX,
                        "topY": topY
                    };
                }
            }
            return $this;
        },
        //设置边框颜色动画
        initBorderBgColor: function () {
            var $this = $(this);

            if (!settings.lastCurrentNode) {
                return $this;
            }


            if (settings.lastCurrentNode.quadrantNumber) {
                //1、设置圆角位置left:settings.insideLeftBorder+settings.outsideLeftPadding,
                //top:settings.insideToptBorder+  settings.outsideTopPadding
                $this.find("#imgborderletTop").css({
                    "left": -(settings.insideLeftBorder + settings.outsideLeftPadding) + "px",
                    "top": -(settings.insideToptBorder + settings.outsideTopPadding) + "px"
                });

                //2、设置圆角位置right:settings.insiderightBorder+settings.outsideRigthPadding
                //top:settings.insideToptBorder+  settings.outsideTopPadding
                $this.find("#imgborderrightTop").css({
                    "right": -(settings.insiderightBorder + settings.outsideRigthPadding) + "px",
                    "top": -(settings.insideToptBorder + settings.outsideTopPadding) + "px"
                });

                //3、设置圆角位置right:settings.insiderightBorder+settings.outsideRigthPadding
                //bottom:settings.insidebottomBorder+  settings.outsideBottomPadding
                $this.find("#imgborderbottomLeft").css({
                    "left": -(settings.insideLeftBorder + settings.outsideLeftPadding) + "px",
                    "bottom": -(settings.insidebottomBorder + settings.outsideBottomPadding) + "px"
                });

                //4、设置圆角位置right:settings.insiderightBorder+settings.outsideRigthPadding,
                //bottom:settings.insidebottomBorder+  settings.outsideBottomPadding
                $this.find("#imgborderbottomRight").css({
                    "right": -(settings.insiderightBorder + settings.outsideRigthPadding) + "px",
                    "bottom": -(settings.insidebottomBorder + settings.outsideBottomPadding) + "px"
                });


                //设置条形带的宽度，以及position
                //1.top:
                $this.find("#borderTipTop").css({
                    "height": settings.outsideTopPadding + "px",
                    "left": settings.currentDis + "px",
                    "top": -(settings.insideToptBorder + settings.outsideTopPadding) + "px"
                });
                //1.right:
                $this.find("#borderTipRight").css({
                    "width": settings.outsideRigthPadding + "px",
                    "right": -(settings.insiderightBorder + settings.outsideRigthPadding),
                    "top": 20 + "px"
                });
                //1.bottom:
                $this.find("#borderTipBottom").css({
                    "height": settings.outsideBottomPadding + "px",
                    "right": "20px",
                    "bottom": -(settings.insidebottomBorder + settings.outsideBottomPadding) + "px"
                });
                //1.left:
                $this.find("#borderTipLeft").css({
                    "width": settings.outsideLeftPadding + "px",
                    "left": -(settings.insideLeftBorder + settings.outsideLeftPadding) + "px",
                    "bottom": "20px"
                });


                //设置是否需要动画
                var animateTime = 0;
                if (settings.animate == true) {
                    animateTime = 600;
                }
                if (settings.lastCurrentNode.quadrantNumber == 1) {
                    $this.find("#borderTipTop").animate({
                        "width": (settings.lastCurrentNode.nodeAllDis - settings.currentDis) + "px"
                    }, animateTime);
                } else if (settings.lastCurrentNode.quadrantNumber == 2) {
                    $this.find("#borderTipTop").animate({
                        "width": (settings.arcW - settings.currentDis - 20) + "px"
                    }, animateTime, "", function () {
                        $this.find("#imgborderrightTop").css({
                            "display": "block"
                        });
                        $this.find("#borderTipRight").animate({
                            "height": (settings.lastCurrentNode.nodeAllDis - settings.arcW - 10) + "px"
                        }, animateTime);
                    });
                } else if (settings.lastCurrentNode.quadrantNumber == 3) {
                    $this.find("#borderTipTop").animate({
                        "width": (settings.arcW - settings.currentDis - 20) + "px"
                    }, animateTime, "", function () {
                        $this.find("#imgborderrightTop").css({
                            "display": "block"
                        });
                        $this.find("#borderTipRight").animate({
                            "height": (settings.arcH - 40) + "px"
                        }, animateTime, "", function () {
                            $this.find("#imgborderbottomRight").css({
                                "display": "block"
                            });

                            if ((settings.lastCurrentNode.nodeAllDis + settings.avrageDis) >= (settings.arcH * 2 + settings.arcW * 2)) {
                                $this.find("#borderTipBottom").animate({
                                    "width": (settings.arcW - 40) + "px"
                                }, animateTime, "", function () {
                                    $this.find("#imgborderbottomLeft").css({
                                        "display": "block"
                                    });
                                    $this.find("#borderTipLeft").animate({
                                        "height": (settings.arcH - 40) + "px"
                                    }, animateTime, "", function () {
                                        $this.find("#imgborderletTop").css({
                                            "display": "block"
                                        })
                                    });
                                });
                            } else {
                                $this.find("#borderTipBottom").animate({
                                    "width": (settings.lastCurrentNode.nodeAllDis - settings.arcH - settings.arcW - 30) + "px"
                                }, animateTime);
                            }


                        });
                    });
                } else if (settings.lastCurrentNode.quadrantNumber == 4) {
                    $this.find("#borderTipTop").animate({
                        "width": (settings.arcW - settings.currentDis - 20) + "px"
                    }, animateTime, "", function () {
                        $this.find("#imgborderrightTop").css({
                            "display": "block"
                        });
                        $this.find("#borderTipRight").animate({
                            "height": (settings.arcH - 40) + "px"
                        }, animateTime, "", function () {
                            $this.find("#imgborderbottomRight").css({
                                "display": "block"
                            });
                            $this.find("#borderTipBottom").animate({
                                "width": (settings.arcW - 40) + "px"
                            }, animateTime, "", function () {
                                $this.find("#imgborderbottomLeft").css({
                                    "display": "block"
                                });
                                if ((settings.lastCurrentNode.nodeAllDis + settings.avrageDis) > (settings.arcH * 2 + settings.arcW * 2)) {
                                    $this.find("#borderTipLeft").animate({
                                        "height": (settings.arcH - 40) + "px"
                                    }, animateTime, "", function () {
                                        $this.find("#imgborderletTop").css({
                                            "display": "block"
                                        })
                                    });
                                } else {
                                    $this.find("#borderTipLeft").animate({
                                        "height": (settings.lastCurrentNode.nodeAllDis - settings.arcH - settings.arcW * 2) + "px"
                                    }, animateTime);
                                }
                            });

                        });
                    });
                } else if (settings.lastCurrentNode.quadrantNumber == 5) {
                    $this.find("#borderTipTop").animate({
                        "width": (settings.arcW - settings.currentDis - 20) + "px"
                    }, 1000, "", function () {
                        $this.find("#imgborderrightTop").css({
                            "display": "block"
                        });
                        $this.find("#borderTipRight").animate({
                            "height": (settings.arcH - 40) + "px"
                        }, 1000, "", function () {
                            $this.find("#imgborderbottomRight").css({
                                "display": "block"
                            });
                            $this.find("#borderTipBottom").animate({
                                "width": (settings.arcW - 40) + "px"
                            }, 1000, "", function () {
                                $this.find("#imgborderbottomLeft").css({
                                    "display": "block"
                                });
                                if ((settings.lastCurrentNode.nodeAllDis + settings.avrageDis) > (settings.arcH * 2 + settings.arcW * 2)) {
                                    $this.find("#borderTipLeft").animate({
                                        "height": (settings.arcH - 40) + "px"
                                    }, 1000, "", function () {
                                        $this.find("#imgborderletTop").css({
                                            "display": "block"
                                        })
                                    });
                                } else {
                                    $this.find("#borderTipLeft").animate({
                                        "height": (settings.lastCurrentNode.nodeAllDis - settings.arcH - settings.arcW * 2) + "px"
                                    }, 1000);
                                }
                            });
                        });
                    });
                }
            }
            return $this;
        },
        initCenterContent: function () {
            var $this = $(this);
            var divDom = '<div class="centerContent" style=" padding:4px; backgroud-color:red; position:absolute;left:50%;top:50%; "></div>'
            var h5Dom = '<h5 style="color:#14AF8D;display: none; font-size:22px;margin:0;padding:0;text-align:center;font-weight:400">进行中...</h5>'
            var pDom = '<p style="color:#666;text-align:center;font-size:40px;font-weight:500;margin:0;padding-top:8px;"><span id="holdCircleTitle">' + settings.title + '</span></p>'
            $this.children().children().append(divDom).children(".centerContent").append(h5Dom).append(pDom).css({
                "marginTop": -($(".centerContent").height() / 2) + "px",
                "marginLeft": -($(".centerContent").width() / 2) + "px"
            })
            return $this;
        },
        initNodeName: function () {
            var $this = $(this);
            var circles = $this.children().children().children(".clircle");
            for (var i = 0; i < circles.length; i++) {
                var circle = circles[i];
                var titleName = $(circle).attr("titlename"); //节点名称
                var quadrantNumber = $(circle).attr("quadrantNumber"); //节点象限

                var nodeState = 0; //节点状态，是否执行


                //超出八个长度出现...
                var strLen = settings.getStrLength(titleName) || 0;

                var newTileName = "";
                if (strLen > 14) {
                    newTileName = titleName.substr(0, 7) + "...";
                } else {
                    newTileName = titleName
                }



                if ($(circle).attr("nodestate")) {
                    nodeState = $(circle).attr("nodestate");
                }
                var childNodeHtml;
                if (nodeState == 0) {
                    childNodeHtml = '<span class="clearfix circleNodeName" style="position:absolute; line-height:18px; width:60px; left:-10px; top:' + ($(circle).height() + 10) + 'px;color:#969696; font-size:14px;">' + newTileName + '</span>';
                } else if (nodeState == 1) {
                    childNodeHtml = '<span class="clearfix circleNodeName" style="position:absolute; line-height:18px; width:60px; left:-10px; top:' + ($(circle).height() + 10) + 'px;color:#666; font-size:14px;">' + newTileName + '</span>';
                } else if (nodeState == 2) {
                    childNodeHtml = '<span class="clearfix circleNodeName" style="position:absolute; line-height:18px; width:60px; left:-10px; top:' + ($(circle).height() + 10) + 'px;color:#666; font-size:14px;">' + newTileName + '</span>';
                } else {
                    childNodeHtml = '<span class="clearfix circleNodeName" style="position:absolute; line-height:18px; width:60px; left:-10px; top:' + ($(circle).height() + 10) + 'px;color:#666; font-size:14px;">' + newTileName + '(缺)</span>';
                }
                $(circle).append(childNodeHtml);
            }
            return $this;
        },
        initTooltipEvents: function () {
            var $this = $(this);



            if (settings.getIEVersion() < 9) {
                return $this;
            }

            if (settings.nodeToolTip) {
                if ($(".toolShow")) {
                    $(".toolShow").remove();
                }

                var toolTipHtml = '<div  class="toolShow border-raduis-3 box-shadow" style="display:none; padding:10px; position:absolute; border:1px solid #14AF8D;background:#fff; width:160px;z-index:10000;font-size:12px;border-radius:6px;">';
                toolTipHtml += '<i class="fa fa-angle-up" style="position:absolute;left:50%; margin-left:-8px; top:0; margin-top:-10px; background:#fff; color:#14AF8D; font-size:14px" ></i>'
                toolTipHtml += '<div style=" padding:2px ;color:#999; line-height:25px;text-align:left;height:25px; white-space: nowrap; overflow: hidden; text-overflow: hidden;">作为服务方</div>';
                toolTipHtml += '<div style=" padding:2px ;color:#999; line-height:25px;text-align:left;height:25px; white-space: nowrap; overflow: hidden; text-overflow: hidden;">调用总数：<span id="drop-node-serverTotalCount" style="color:#333;"></span></div>';
                toolTipHtml += '<div style=" padding:2px;color:#999; line-height:20px;text-align:left;height:25px; white-space: nowrap; overflow: hidden; text-overflow: hidden;">异常：<span id="drop-node-serverFailCount" style="color:#333;"></span></div>';
                toolTipHtml += '<div style=" padding:2px ;color:#999; line-height:25px;text-align:left;height:25px; white-space: nowrap; overflow: hidden; text-overflow: hidden;">作为消费方</div>';
                toolTipHtml += '<div style=" padding:2px;color:#999; line-height:20px;text-align:left;height:25px; white-space: nowrap; overflow: hidden; text-overflow: hidden;">调用总数：<span id="drop-node-consumerTotalCount" style="color:#333;"></span></div>';
                toolTipHtml += '<div style=" padding:2px;color:#999; line-height:20px;text-align:left;height:25px; white-space: nowrap; overflow: hidden; text-overflow: hidden;">异常：<span id="drop-node-consumerFailCount" style="color:#333;"></span></div>';
                toolTipHtml += '</div>';
                $(".closeLoop .closeLoop-box").append(toolTipHtml);
                $this.on("mouseenter", ".clircle", function (ev) {

                    //执行时间
                    $("#drop-node-serverTotalCount").text($(this).data("servertotalcount"));
                    $("#drop-node-serverFailCount").text($(this).data("serverfailcount"));
                    $("#drop-node-consumerTotalCount").text($(this).data("consumertotalcount"));
                    $("#drop-node-consumerFailCount").text($(this).data("consumerfailcount"));
                    ////执行地址
                    //var address = $(this).attr("data-address");
                    ////节点名称
                    //var name = $(this).attr("name");
                    ////操作人员
                    //var czry = $(this).attr("data-czry");


                    if ($.circleMouseenterInterval) {
                        clearTimeout($.circleMouseenterInterval)
                    }
                    var that = $(this);
                    $.circleMouseenterInterval = setTimeout(function () {
                        $(".toolShow").css({
                            "left": parseInt(that.css("left")) - ($(".toolShow").width() / 2 - that.width() / 2) - 4 + "px",
                            "top": parseInt(that.css("top")) + that.height() + 15 + "px"
                        });
                        $(".toolShow").slideDown();
                    }, 500);
                    return false;
                }).on("mouseleave", ".clircle", function (ev) {
                    if ($.circleMouseenterInterval) {
                        clearTimeout($.circleMouseenterInterval)
                    }
                    $(".toolShow").css({
                        "display": "none"
                    });
                })
                $this.on("mouseenter", ".circleNodeName", function (ev) {
                    ev.stopPropagation();
                    return false;
                }).on("mouseleave", ".circleNodeName", function (ev) {
                    ev.stopPropagation();
                    return false;
                })
            }
            return $this;
        },
        reloadBorderBgColor: function () {
            var $this = $(this);
            $this.find("#borderTipTop").css({
                "width": "0"
            });
            $this.find("#imgborderrightTop").css({
                "display": "none"
            });
            $this.find("#borderTipRight").css({
                "height": "0"
            })
            $this.find("#imgborderbottomRight").css({
                "display": "none"
            });
            $this.find("#borderTipBottom").css({
                "width": "0"
            })
            $this.find("#imgborderbottomLeft").css({
                "display": "none"
            });
            $this.find("#borderTipLeft").css({
                "height": "0"
            })
            $this.find("#imgborderletTop").css({
                "display": "none"
            })
            return $this;
        },
        initAnimate: function () {
            var $this = $(this);
            $this.closeLoop('BorderBgColor').closeLoop('initBorderBgColor')
            return $this;
        },
        clearAnimate: function () {
            var $this = $(this);
            $this.find("#borderTipTop").stop(true);
            $this.find("#imgborderrightTop").css({
                "display": "none"
            });
            $this.find("#borderTipRight").stop(true);
            $this.find("#imgborderbottomRight").css({
                "display": "none"
            });
            $this.find("#borderTipBottom").stop(true);
            $this.find("#imgborderbottomLeft").css({
                "display": "none"
            });
            $this.find("#borderTipLeft").stop(true);
            $this.find("#imgborderletTop").css({
                "display": "none"
            })
            return $this;
        },
        timerInterval: function () {
            var $this = $(this);
            if ($.timerAimate) {
                clearInterval($.timerAimate)
            }
            $.timerAimate = setInterval(function () {
                $this.closeLoop("clearAnimate").closeLoop("reloadBorderBgColor").closeLoop("initBorderBgColor");
            }, 5000);
            return $this;
        },
        initEvents: function () {
            var $this = $(this);
            $(window).on("resize", function () {
                $this.closeLoop("clearAnimate").closeLoop("reloadBorderBgColor").closeLoop("initCircles").closeLoop("initBorderBgColor"); //initBorderBgColor    //initCircles
            });
            return $this;
        },
        setTitle: function (title) {
            var $this = $(this);
            $this.find("#holdCircleTitle").text(title);
            return $this;
        }
    };

    $.fn.closeLoop = function (method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.initLoop.apply(this, arguments);
        } else {
            $.error('Method with name ' + method + ' does not exists for jQuery.treegrid');
        }
    }

    /**
     *  Plugin's default options
     */
    $.fn.closeLoop.defaults = {
        title: "",
        outsidePadding: 10,
        nodeToolTip: true,
        paramValue: "",
        url: '',
        loadSuccess: "",
        getStrLength: function (str) {
            return str.replace(/[\u0391-\uFFE5]/g, "aa").length;  //先把中文替换成两个字节的英文，在计算长度
        },
        getIEVersion: function () {
            var browser = navigator.appName
            var b_version = navigator.appVersion
            var version = b_version.split(";");
            var trim_Version = version[1].replace(/[ ]/g, "");
            if (browser == "Microsoft Internet Explorer" && trim_Version == "MSIE6.0") {
                return 6;
            }
            else if (browser == "Microsoft Internet Explorer" && trim_Version == "MSIE7.0") {
                return 7;
            }
            else if (browser == "Microsoft Internet Explorer" && trim_Version == "MSIE8.0") {
                return 8;
            }
        }
    };
})(jQuery, window);